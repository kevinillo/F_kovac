"""
Django settings for tienda project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import environ
from .jazzmin import JAZZMIN_SETTINGS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env= environ.Env()#iniciar libreria
environ.Env.read_env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG= env.bool('DEBUG', default=False)

ALLOWED_HOSTS = tuple(env.list('ALLOWED_HOSTS', default=[]))

# Application definiti# No selected code was provided, so I'll suggest an improvement to the existing code.

# Add a try-except block to handle potential errors when reading environment variables.
try:
    env.read_env()
except Exception as e:
    print(f"Error reading environment variables: {e}")

# Consider adding a check to ensure that the SECRET_KEY is not empty.
if not env.str('SECRET_KEY'):
    raise ValueError("SECRET_KEY cannot be empty")

# You can also add a check to ensure that the ALLOWED_HOSTS is not empty.
if not env.list('ALLOWED_HOSTS', default=[]):
    raise ValueError("ALLOWED_HOSTS cannot be empty")

# Add a try-except block to handle potential errors when connecting to the database.
try:
    DATABASES = {
        'default': {
        'ENGINE': env('DB_ENGINE', default='django.db.backends.mysql'),
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env.str('DB_HOST').strip(),
        'PORT': env('DB_PORT'),
    }
}
except Exception as e:
    print(f"Error configuring database: {e}")

# Consider adding a check to ensure that the EMAIL_HOST_PASSWORD is not empty.
if not env.str('EMAIL_HOST_PASSWORD'):
    raise ValueError("EMAIL_HOST_PASSWORD cannot be empty")

# You can also add a check to ensure that the EMAIL_HOST_USER is not empty.
if not env.str('EMAIL_HOST_USER'):
    raise ValueError("EMAIL_HOST_USER cannot be empty")

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ferreteria',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'tienda.urls'
MEDIA_URL = '/media/'  # URL base para servir archivos multimedia
MEDIA_ROOT = BASE_DIR / 'media'  # Carpeta donde se almacenar치n los archivos subidos

SITE_ID = 1
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'fkovac1346@gmail.com'  # Reemplaza con tu correo
EMAIL_HOST_PASSWORD = 'dxpo yflq mlsl mphc'   # Reemplaza con la contrase침a
DOMAIN = "http://127.0.0.1:8000"# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tienda.wsgi.application'
LOGIN_REDIRECT_URL = '/'  # Cambia a la p치gina deseada
LOGOUT_REDIRECT_URL = '/login/'    # Redirige al login tras cerrar sesi칩n


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
